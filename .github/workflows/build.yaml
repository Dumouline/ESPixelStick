name: ESPixelStick CI
on: [push, pull_request]
jobs:
  firmware:
    strategy:
      matrix:
        include:
          # ESPixelStick V3
          - target: "espsv3"
            chip: "esp8266"
          # Wemos D1 Mini ESP8266
          - target: "d1_mini"
            chip: "esp8266"
          # Wemos D1 Mini ESP32
          - target: "d1_mini32"
            chip: "esp32"
          # Lolin D32 Pro
          - target: "d32_pro"
            chip: "esp32"

    runs-on: ubuntu-latest
    steps:
      # Checkout ESPixelStick
      - uses: actions/checkout@v2

      - name: Create secrets.h
        run: |
          echo '#define SECRETS_SSID "SSID_NOT_SET"' > ESPixelStick/src/secrets.h
          echo '#define SECRETS_PASS "PASSPHRASE_NOT_SET"' >> ESPixelStick/src/secrets.h

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      # Build and move / rename firmware files
      # Make sure to update bootloader and boot_app0.bin location when the ESP32 core updates
      - name: Compile for ${{ matrix.target }}
        env:
          chip: ${{ matrix.chip }}
        run: |
          pio run -e ${{ matrix.target }}
          mkdir -p firmware/${{ matrix.chip }}
          mv .pio/build/${{ matrix.target }}/firmware.bin firmware/${{ matrix.chip }}/${{ matrix.target }}-app.bin
          mv .pio/build/${{ matrix.target }}/firmware.elf firmware/${{ matrix.chip }}/${{ matrix.target }}.elf
          if [ "$chip" = "esp32" ]; then
          mv .pio/build/${{ matrix.target }}/partitions.bin firmware/esp32/${{ matrix.target }}-partitions.bin
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/sdk/esp32/bin/bootloader_dio_40m.bin firmware/esp32/${{ matrix.target }}-bootloader.bin
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin firmware/esp32/boot_app0.bin
          fi

      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Firmware Binaries
          path: firmware


  package:
    needs: firmware
    runs-on: ubuntu-latest
    steps:
      # Set Release Archive Filename
      - run: echo "ARCHFILE=ESPixelStick_CI-$(date +'%Y%m%d%H%M%S').zip" >> $GITHUB_ENV

      # Checkout ESPixelStick
      - uses: actions/checkout@v2

      # Download firmware binary artifact
      - uses: actions/download-artifact@v2
        with:
          name: Firmware Binaries
          path: dist/firmware

      # Install Node
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install

      # Build and move the web pages
      - name: Compile Web Pages
        run: |
          gulp
          gulp md
          gulp ci
          mv ESPixelStick/data/* dist/fs

      - name: Move CI specific release files into place
        run: |
          mv .ci/firmware.json dist/firmware/firmware.json

      - name: Create Release Archive
        run: zip -r ../${{ env.ARCHFILE }} *
        working-directory: dist

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Release Archive
          path: ${{ env.ARCHFILE }}
